JSON With Data Base CRUD

Default Method's


package com.TKAGopal.With.DataBase.RestAPI;

import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class StudentControllerDefault {

	@Autowired
	SessionFactory sf;

	@RequestMapping("insertD")
	public Student saveDataD() {
		Session ss = sf.openSession();
		Transaction t = ss.beginTransaction();
		Student s = new Student(111, "Gopal");
		ss.save(s);
		t.commit();
		ss.close();
		return s;
	}

	@RequestMapping("updateD")
	public Student updateDataD() {
		Session ss = sf.openSession();
		Transaction t = ss.beginTransaction();
		Student s = new Student(111, "TKAGopal");
		ss.update(s);
		t.commit();
		ss.close();
		return s;
	}

	@RequestMapping("deleteD")
	public Student deleteDataD() {
		Session ss = sf.openSession();
		Transaction t = ss.beginTransaction();
		Student s = new Student(111, "Gopal");
		ss.delete(s);
		t.commit();
		ss.close();
		return s;
	}

	@RequestMapping("selectD")
	public Student selectDataD() {
		Session ss = sf.openSession();
		Student s = ss.get(Student.class, 111);
		return s;
	}

	@RequestMapping("selectDM")
	public List<Student> selectDataDM() {
		Session ss = sf.openSession();
		Query query = ss.createQuery("from Student");
		List<Student> list = query.list();
		for (Student student : list) {
			System.out.println(student.getId() + " " + student.getName());
		}
		return list;
	}

}











parameterised method's



package com.TKAGopal.With.DataBase.RestAPI;

import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class StudentControllerParameter {

	@Autowired
	SessionFactory sf;

	
	@PostMapping("insertP")
	public Student saveDataP(@RequestBody Student student) {
		Session ss = sf.openSession();
		Transaction t = ss.beginTransaction();
		ss.save(student);
		t.commit();
		ss.close();
		return student;
	}

	@PutMapping("updateP")
	public Student updateDataP(@RequestBody Student student) {
		Session ss = sf.openSession();
		Transaction t = ss.beginTransaction();
		ss.update(student);
		t.commit();
		ss.close();
		return student;
	}

	@DeleteMapping("deleteP/{id}") // api
	public Student deleteDataP(@PathVariable int id) {
		Session ss = sf.openSession();
		Transaction t = ss.beginTransaction();
		Student s = ss.get(Student.class, id);
		ss.delete(s);
		t.commit();
		return s;
	}
	
	@GetMapping("selectP/{id}")
	public Student selectDataP(@PathVariable int id) {
		Session ss = sf.openSession();
		Student s = ss.get(Student.class, id);
		return s;
	}
	
	@GetMapping("selectDM")
	public List<Student> selectDataDM() {
		Session ss = sf.openSession();
		Query query = ss.createQuery("from Student");
		List<Student> list = query.list();
		for (Student student : list) {
			System.out.println(student.getId() + " " + student.getName());
		}
		return list;
	}
}
